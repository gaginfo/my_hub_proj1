#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

pthread_cond_t condition = PTHREAD_COND_INITIALIZER; /* Création de la condition */
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER; /* Création du mutex */

void* threadAlarme (void* arg);
void* threadCompteur (void* arg);
void Init();
void 

int main (void)
{
	pthread_t monThreadCompteur;
	pthread_t monThreadAlarme;

	pthread_create (&monThreadCompteur, NULL, threadCompteur, (void*)NULL);
	pthread_create (&monThreadAlarme, NULL, threadAlarme, (void*)NULL); /* Création des threads */

	pthread_join (monThreadCompteur, NULL);
	pthread_join (monThreadAlarme, NULL); /* Attente de la fin des threads */

	return 0;
}

void* threadCompteur (void* arg)
{
	int compteur = 0, nombre = 0;
	int STATE = 0;/* l'etat du processus 0-> actif 1->demande l'entree au section a la section critique
               2-> dans la section critique  3-> sortie de la section critique*/

	int valread = 0;/*le processus ne recoit pas un message */
	int server_fd, new_socket;
	struct sockaddr_in address;
	int opt = 1;
	int addrlen = sizeof(address);
	char buffer[1024] = {0};
	char *Jeton = "Jeton from server";
	// Creating socket file descriptor
	if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0)
	{
		perror("socket failed");
		exit(EXIT_FAILURE);
	}

	address.sin_family = AF_INET;
	address.sin_addr.s_addr = INADDR_ANY;
	address.sin_port = htons( PORT );
	// Binding
	if (bind(server_fd, (struct sockaddr *)&address,
	sizeof(address))<0)
	{
		perror("bind failed");
		exit(EXIT_FAILURE);
	}
	if (listen(server_fd, 3) < 0)
	{
		perror("listen"); exit(EXIT_FAILURE);
	}
	if ((new_socket = accept(server_fd, (struct sockaddr *)
	& address, (socklen_t*)&addrlen))<0)
	{
		perror("accept"); exit(EXIT_FAILURE);
	}
	srand(time(NULL));
	while(1) /* Boucle infinie */
	{
		valread = read( new_socket , buffer, 1024);
        printf("%s\n",buffer ) ;
	}	
	
	srand(time(NULL));

	while(1) /* Boucle infinie */
	{
		nombre = rand()%10; /* On tire un nombre entre 0 et 10 */
		compteur += nombre; /* On ajoute ce nombre à la variable compteur */

		printf("\n%d", compteur);
		
		if(compteur >= 20) /* Si compteur est plus grand ou égal à 20 */
		{
			pthread_mutex_lock (&mutex); /* On verrouille le mutex */
			pthread_cond_signal (&condition); /* On délivre le signal : condition remplie */
			pthread_mutex_unlock (&mutex); /* On déverrouille le mutex */

			compteur = 0; /* On remet la variable compteur à 0 */
		}

		sleep (1); /* On laisse 1 seconde de repos */
	}
	
	pthread_exit(NULL); /* Fin du thread */
}

void* threadAlarme (void* arg)
{
	while(1) /* Boucle infinie */
	{
		pthread_mutex_lock(&mutex); /* On verrouille le mutex */
		pthread_cond_wait (&condition, &mutex); /* On attend que la condition soit remplie */
		printf("\nLE COMPTEUR A DÉPASSÉ 20."); 
		pthread_mutex_unlock(&mutex); /* On déverrouille le mutex */
	}
	
	pthread_exit(NULL); /* Fin du thread */
}
